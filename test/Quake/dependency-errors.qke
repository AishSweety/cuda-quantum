// ========================================================================== //
// Copyright (c) 2022 - 2024 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt --assign-ids --dep-analysis %s -split-input-file -verify-diagnostics

// expected-error @+1 {{function arguments not currently supported in dep-analysis}}
func.func @test(%arg0 : i32) {
  return
}

// -----

// expected-error @+1 {{non-void return types not currently supported in dep-analysis}}
func.func @test() -> !quake.measure {
  %0 = quake.null_wire
  %measOut, %wires = quake.mz %0 : (!quake.wire) -> (!quake.measure, !quake.wire)
  quake.sink %wires : !quake.wire
  return %measOut : !quake.measure
}

// -----

func.func @test() {
  // expected-error @+1 {{'quake.alloca' op dep-analysis requires all quake operations to be in value form}}
  %0 = quake.alloca !quake.ref
  %1 = quake.alloca !quake.ref
  %2 = quake.alloca !quake.ref
  quake.h %2 : (!quake.ref) -> ()
  quake.x %2 : (!quake.ref) -> ()
  quake.y %2 : (!quake.ref) -> ()
  quake.h %1 : (!quake.ref) -> ()
  quake.x [%0] %1 : (!quake.ref, !quake.ref) -> ()
  quake.x [%0] %2 : (!quake.ref, !quake.ref) -> ()
  quake.z %1 : (!quake.ref) -> ()
  quake.y %1 : (!quake.ref) -> ()
  quake.x %1 : (!quake.ref) -> ()
  %measOut = quake.mz %1 : (!quake.ref) -> !quake.measure
  quake.dealloc %1 : !quake.ref
  quake.dealloc %2 : !quake.ref
  quake.dealloc %0 : !quake.ref
  return
}

// -----

// expected-error @+1 {{multiple blocks not currently supported in assign-ids}}
func.func @test() {
    %0 = quake.null_wire
    %1 = quake.null_wire
    %2 = quake.null_wire
    cf.br ^bb1(%0,%1,%2 : !quake.wire, !quake.wire, !quake.wire) 
  ^bb1(%3: !quake.wire, %4: !quake.wire, %5: !quake.wire):  // 2 preds: ^bb4, ^bb5
    quake.sink %3 : !quake.wire
    quake.sink %4 : !quake.wire
    quake.sink %5 : !quake.wire
    return
}

// -----

// expected-error @+1 {{func.func' op assigning qids failed}}
func.func @test() {
    %0 = quake.null_wire
    // expected-error @+1 {{control flow operations not currently supported in assign-ids}}
    %1 = cc.loop while ((%arg0 = %0) -> (!quake.wire)) {
      %measOut, %wires = quake.mz %arg0 : (!quake.wire) -> (!quake.measure, !quake.wire)
      %2 = quake.discriminate %measOut : (!quake.measure) -> i1
      cc.condition %2(%wires : !quake.wire)
    } do {
    ^bb0(%arg0: !quake.wire):
      %2 = quake.h %arg0 : (!quake.wire) -> !quake.wire
      cc.continue %2 : !quake.wire
    }
    // expected-error @+1 {{failed to legalize operation 'quake.sink' that was explicitly marked illegal}}
    quake.sink %1 : !quake.wire
    return
}

// -----

// expected-error @+1 {{func.func' op assigning qids failed}}
func.func @test() {
  %0 = quake.null_wire
  %1 = quake.null_wire
  %2 = quake.null_wire
  %3 = quake.h %0 : (!quake.wire) -> !quake.wire
  %measOut, %wires = quake.mz %3 : (!quake.wire) -> (!quake.measure, !quake.wire)
  %4 = quake.discriminate %measOut : (!quake.measure) -> i1
  // expected-error @+1 {{control flow operations not currently supported in assign-ids}}
  %5:3 = cc.if(%4) ((%arg1 = %wires, %arg2 = %1, %arg3 = %2)) -> (!quake.wire, !quake.wire, !quake.wire) {
    %6 = quake.x %arg1 : (!quake.wire) -> !quake.wire
    %7 = quake.h %arg2 : (!quake.wire) -> !quake.wire
    %measOut_0, %wires_1 = quake.mz %7 : (!quake.wire) -> (!quake.measure, !quake.wire)
    cc.continue %6, %wires_1, %arg3 : !quake.wire, !quake.wire, !quake.wire
  } else {
    %6 = quake.h %arg3 : (!quake.wire) -> !quake.wire
    %measOut_0, %wires_1 = quake.mz %6 : (!quake.wire) -> (!quake.measure, !quake.wire)
    cc.continue %arg1, %arg2, %wires_1 : !quake.wire, !quake.wire, !quake.wire
  }
  // expected-error @+1 {{failed to legalize operation 'quake.sink' that was explicitly marked illegal}}
  quake.sink %5#0 : !quake.wire
  quake.sink %5#2 : !quake.wire
  quake.sink %5#1 : !quake.wire
  return
}
